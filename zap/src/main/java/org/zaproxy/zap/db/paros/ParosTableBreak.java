/*
 * Zed Attack Proxy (ZAP) and its related class files.
 *
 * ZAP is an HTTP/HTTPS proxy for assessing web application security.
 *
 * Copyright 2023 The ZAP Development Team
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.zaproxy.zap.db.paros;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Vector;
import org.parosproxy.paros.db.DatabaseException;
import org.parosproxy.paros.db.DbUtils;
import org.parosproxy.paros.db.paros.ParosAbstractTable;
import org.zaproxy.zap.db.RecordBreak;
import org.zaproxy.zap.db.TableBreak;

public class ParosTableBreak extends ParosAbstractTable implements TableBreak {

    private static final String TABLE_NAME = "BREAK";

    private static final String BREAKID = "BREAKID";
    private static final String URL_STRING = "URL_STRING";
    private static final String LOCATION = "LOCATION";
    private static final String MATCH = "MATCH";
    private static final String INVERSE = "INVERSE";
    private static final String IGNORE_CASE = "IGNORE_CASE";
    private static final String ON_REQUEST = "ON_REQUEST";
    private static final String ON_RESPONSE = "ON_RESPONSE";

    private PreparedStatement psRead = null;
    private PreparedStatement psInsert = null;
    private CallableStatement psGetIdLastInsert = null;

    private PreparedStatement psDeleteBreak = null;
    private PreparedStatement psDeleteAllBreaks = null;

    private PreparedStatement psUpdate = null;

    public ParosTableBreak() {}

    @Override
    protected void reconnect(Connection conn) throws DatabaseException {
        try {
            if (!DbUtils.hasTable(conn, TABLE_NAME)) {
                // Need to create the table
                DbUtils.execute(
                        conn,
                        "CREATE cached TABLE "
                                + TABLE_NAME
                                + " ("
                                + BREAKID
                                + " integer generated by default as identity (start with 1), "
                                + URL_STRING
                                + " varchar(1024) NOT NULL, "
                                + LOCATION
                                + " varchar(32) NOT NULL, "
                                + MATCH
                                + " varchar(32) NOT NULL, "
                                + INVERSE
                                + " boolean NOT NULL, "
                                + IGNORE_CASE
                                + " boolean NOT NULL, "
                                + ON_REQUEST
                                + " boolean NOT NULL, "
                                + ON_RESPONSE
                                + " boolean NOT NULL, "
                                + ")");
            }

            psRead =
                    conn.prepareStatement(
                            "SELECT TOP 1 * FROM " + TABLE_NAME + " WHERE " + BREAKID + " = ?");

            psInsert =
                    conn.prepareStatement(
                            "INSERT INTO "
                                    + TABLE_NAME
                                    + " ("
                                    + URL_STRING
                                    + ","
                                    + LOCATION
                                    + ","
                                    + MATCH
                                    + ","
                                    + INVERSE
                                    + ","
                                    + IGNORE_CASE
                                    + ","
                                    + ON_REQUEST
                                    + ","
                                    + ON_RESPONSE
                                    + ") VALUES (?, ?, ?, ?, ?, ?, ?)");
            psGetIdLastInsert = conn.prepareCall("CALL IDENTITY();");
            psDeleteBreak =
                    conn.prepareStatement(
                            "DELETE FROM " + TABLE_NAME + " WHERE " + BREAKID + " = ?");
            psDeleteAllBreaks = conn.prepareStatement("DELETE FROM " + TABLE_NAME);

            psUpdate =
                    conn.prepareStatement(
                            "UPDATE "
                                    + TABLE_NAME
                                    + " SET "
                                    + URL_STRING
                                    + " = ?, "
                                    + LOCATION
                                    + " = ?, "
                                    + MATCH
                                    + " = ?, "
                                    + INVERSE
                                    + " = ?, "
                                    + IGNORE_CASE
                                    + " = ?, "
                                    + ON_REQUEST
                                    + " = ?, "
                                    + ON_RESPONSE
                                    + " = ? "
                                    + "WHERE "
                                    + BREAKID
                                    + " = ?");
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public synchronized RecordBreak read(int brkId) throws DatabaseException {
        try {
            psRead.setInt(1, brkId);
            try (ResultSet rs = psRead.executeQuery()) {
                RecordBreak rb = build(rs);
                return rb;
            }
        } catch (Exception e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public synchronized RecordBreak write(
            String urlString,
            String location,
            String match,
            boolean inverse,
            boolean ignoreCase,
            boolean onRequest,
            boolean onResponse)
            throws DatabaseException {

        try {
            psInsert.setString(1, urlString);
            psInsert.setString(2, location);
            psInsert.setString(3, match);
            psInsert.setBoolean(4, inverse);
            psInsert.setBoolean(5, ignoreCase);
            psInsert.setBoolean(6, onRequest);
            psInsert.setBoolean(7, onResponse);
            psInsert.executeUpdate();

            int id;
            try (ResultSet rs = psGetIdLastInsert.executeQuery()) {
                rs.next();
                id = rs.getInt(1);
            }
            return read(id);
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    private RecordBreak build(ResultSet rs) throws DatabaseException {
        try {
            RecordBreak recordBreak = null;
            if (rs.next()) {
                recordBreak =
                        new RecordBreak(
                                rs.getInt(BREAKID),
                                rs.getString(URL_STRING),
                                rs.getString(LOCATION),
                                rs.getString(MATCH),
                                rs.getBoolean(INVERSE),
                                rs.getBoolean(IGNORE_CASE),
                                rs.getBoolean(ON_REQUEST),
                                rs.getBoolean(ON_RESPONSE));
            }
            return recordBreak;
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public Vector<Integer> getBreakListBySession(long sessionId) throws DatabaseException {
        try {
            try (PreparedStatement psReadSession =
                    getConnection()
                            .prepareStatement(
                                    "SELECT BREAKID FROM " + TABLE_NAME + " WHERE SESSIONID = ?")) {

                Vector<Integer> v = new Vector<>();
                psReadSession.setLong(1, sessionId);
                try (ResultSet rs = psReadSession.executeQuery()) {
                    while (rs.next()) {
                        int alertId = rs.getInt(BREAKID);
                        v.add(alertId);
                    }
                }
                return v;
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public synchronized void deleteBreak(int brkId) throws DatabaseException {
        try {
            psDeleteBreak.setInt(1, brkId);
            psDeleteBreak.execute();
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public int deleteAllBreaks() throws DatabaseException {
        try {
            return psDeleteAllBreaks.executeUpdate();
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public synchronized void update(
            int brkId,
            String urlString,
            String location,
            String match,
            boolean inverse,
            boolean ignoreCase,
            boolean onRequest,
            boolean onResponse)
            throws DatabaseException {

        try {
            psUpdate.setString(1, urlString);
            psUpdate.setString(2, location);
            psUpdate.setString(3, match);
            psUpdate.setBoolean(4, inverse);
            psUpdate.setBoolean(5, ignoreCase);
            psUpdate.setBoolean(6, onRequest);
            psUpdate.setBoolean(7, onResponse);
            psUpdate.setInt(8, brkId);
            psUpdate.executeUpdate();
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }

    @Override
    public Vector<Integer> getBreakList() throws DatabaseException {
        try {
            try (PreparedStatement psReadScan =
                    getConnection().prepareStatement("SELECT " + BREAKID + " FROM " + TABLE_NAME)) {

                Vector<Integer> v = new Vector<>();
                try (ResultSet rs = psReadScan.executeQuery()) {
                    while (rs.next()) {
                        v.add(rs.getInt(BREAKID));
                    }
                }
                return v;
            }
        } catch (SQLException e) {
            throw new DatabaseException(e);
        }
    }
}
